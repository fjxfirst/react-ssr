一、使用nodemon监听js文件的变化，实现服务自动重启
npm install nodemon -g
在package.json中配置命令"start":"nodemon --watch build --exec node \"./build/bundle.js\"",
表示监听build目录中的文件，如果build中的文件有变化则重新执行bundle.js,因为外层已经包裹了一次",所以\"表示转义
使用webpack的--watch参数，"build": "webpack --config webpack.server.js --watch"
这样先执行npm run build,再执行npm start就实现了服务自动重启
二、npm-run-all提示开发效率
npm install npm-run-all
"dev":"npm-run-all --parallel dev:**", 表示并行执行以dev开头的命令，
"dev:start":"nodemon --watch build --exec node \"./build/bundle.js\"",
"dev:build": "webpack --config webpack.server.js --watch"
这样在开发时只需要执行npm run dev即可
三、在服务器端要使用React.hydrate，而不能使用render
四、服务端渲染要使用react-router-dom中的StaticRouter
<StaticRouter location={req.path} context={{}}>
        {Routes}
      </StaticRouter>
StaticRouter无法感知到地址路径的变化，所以需要location参数，context是通信数据的获取，用来做数据的传递
五、使用redux
六、componentDidMount()不会在服务端执行

这里可能会出现多余的一个空数组，原因是请求favicon.ico造成的，解决办法是把favicon.ico文件放入public目录下
七、多层路由问题
  {
    path:'/',
    component:Home,
    exact:true,
    //当加载Home组件之前会执行loadData方法
    loadData:Home.loadData,
    key:'home',
    routes:[
      {
        path:'/ttt',
        component:Login,
        exact:true,
        key:'ttt'
      }
    ]
  }
  当访问/ttt时，matchPath匹配不到/ttt，这里就要用到react-router-config
  安装react-router-config，npm install react-router-config --save
  使用react-router-config中的matchRoutes,就可以匹配多级路由
八、首次渲染页面抖动问题，原因是服务端的store和浏览器端的store不一致，当服务端的store有数据后，浏览器端的js重新渲染时，它的store是空的，
所以页面内容就会白屏闪一下。解决方法：
数据的注水与脱水，这样首次渲染时store就一致了
注水：将服务器端的state放到window.context中
<html>
      <head>
        <title>ssr</title>
      </head>
      <body>
        <div id="root">${content}</div>
        <script>
        window.context={
          state: ${JSON.stringify(store.getState())}
        }
        </script>
        <script src="/index.js"></script>
      </body>
</html>
脱水：客户端使用的store初始数据之接从window.context中获取
export const getClientStore=()=>{
  //保证服务端的初始数据和浏览器端的初始数据一致，作为reducer的初始默认数据
  const defaultState = window.context.state //数据的脱水
  return createStore(reducer,defaultState,applyMiddleware(thunk))
}
首页组件的componentDidMount可以做优化处理，如果有数据了就不用发送请求
componentDidMount() {
    if(!this.props.list){
      this.props.getHomeList()
    }
}
九、node作为数据获取中间层
axios.get('/api/v2/movie/in_theaters?city=%E5%B9%BF%E5%B7%9E&start=0&count=10')
安装express-http-proxy
import proxy from 'express-http-proxy'
app.use('/api',proxy('https://api.douban.com', {
  proxyReqPathResolver: function (req) {
    console.log(req.url)
    return '/v2/movie/in_theaters?city=%E5%B9%BF%E5%B7%9E&start=0&count=10'
  }
}))
第一个参数'/api',表示接口地址匹配成功的话,会被转发到'https://api.douban.com/v2/movie/in_theaters?city=%E5%B9%BF%E5%B7%9E&start=0&count=10'
十、服务器端请求和客户端请求的不同处理
浏览器运行这段代码:
/api/v2/movie/in_theaters?city=%E5%B9%BF%E5%B7%9E&start=0&count=10等价于请求http://localhost:3000/api/v2/movie/in_theaters?city=%E5%B9%BF%E5%B7%9E&start=0&count=10
如果是服务器运行:
/api/v2/movie/in_theaters?city=%E5%B9%BF%E5%B7%9E&start=0&count=10等价于服务器根目录下/api/v2/movie/in_theaters?city=%E5%B9%BF%E5%B7%9E&start=0&count=10
解决办法：传入参数server来判断，store.dispatch(getHomeList(true))
  let url=''
  if(server){//如果是服务端渲染
    url='https://api.douban.com/v2/movie/in_theaters?city=%E5%B9%BF%E5%B7%9E&start=0&count=10'
  }else{
    url='/api/v2/movie/in_theaters?city=%E5%B9%BF%E5%B7%9E&start=0&count=10'
  }
axios.get(url)
十一、axios中instance的使用
import axios from 'axios'
const instance =axios.create({
  baseURL:'https://api.douban.com' //对于服务器端
})
export default instance
十二、巧用redux-thunk中的withExtraArgument
使用thunk.withExtraArgument直接将对应的axiosInstance带入action中
export const getClientStore=()=>{
  //保证服务端的初始数据和浏览器端的初始数据一致，作为reducer的初始默认数据
  const defaultState = window.context.state //数据的脱水
  //改变服务器端store的内容，那么就一定要使用clientAxios
  return createStore(reducer,defaultState,applyMiddleware(thunk.withExtraArgument(clientAxios)))
}
这样就不需要store.dispatch(getHomeList(true))传入的布尔类型的判断参数了
十三、使用renderRoutes方法实现对多级路由的支持
当用户访问'/'路径时，能匹配出App和Home组件
当用户访问'/login'路径时，能匹配出App和Login组件
  {
    path:'/',
    component:App,
    routes:[
      {
        path:'/',
        component:Home,
        exact:true,
        //当加载Home组件之前会执行loadData方法
        loadData:Home.loadData,
        key:'home'
      },
      {
        path:'/login',
        component:Login,
        exact:true,
        key:'login'
      }
    ]
  }
但是多级路由就不能使用
{routes.map(route => (
 <Route {...route} />
))}了，这里就要使用import {renderRoutes} from "react-router-config",{renderRoutes(routes)},但此时只会展示第一层路由
还需要在App组件中使用
            import {renderRoutes} from "react-router-config"
            const App=()=>{
              return (
                <div>
                  <Header/>
                  {renderRoutes(props.route.routes)}
                </div>
              )
            }
再把Home和Login中的Header组件删除,同时client的路由也要使用{renderRoutes(props.route.routes)}

十四、解决404页返回码功能
  使用<StaticRouter location={req.path} context={{}}>
              <div>
                {renderRoutes(routes)}
              </div>
            </StaticRouter>
  中的context属性，context={{name:'feng'}},在子组件中使用this.props.staticContext来获取，但是staticContext只有服务器端渲染时才会传递进来，
  所以需要判断 if(this.props.staticContext){
              this.props.staticContext.NOT_FOUND = true
            }
十五、实现服务器端301重定向
react-router-dom中的Redirect只适用于客户端做重定向，无法实现服务端做重定向，
当遇到Redirect时,会自动的往<StaticRouter location={req.path} context={{}}>的context中添加相关的对象{ action: 'REPLACE',
                                                                                   location: { pathname: '/', search: '', hash: '', state: undefined },
                                                                                   url: '/' }
if (context.action === 'REPLACE') {//判断是否为重定向
        res.redirect(301, context.url)
}
需要结合StaticRouter,renderRoutes，主要是StaticRouter会注入相关的内容


十六、数据请求失败情况下promise的处理
if (item.route.loadData) {
        /**
         * 一个页面要加载A,B,C,D四个组件，这四个组件都需要服务器端加载数据
         * 假设A组件加载数据有误
         * B,C,D组件有几种情况
         * 1.B,C,D组件数据已经加载完成了
         * 2.假设B,C,D接口比较慢，B,C,D组件数据没有加载完成
         * 我们最终希望的结果是，不论慢或块，加载正确的正常显示，有误的不显示，
         * 所以之前的Promise.all会有问题，所以需要在外面再包一层Promise
         * */
        const promise =new Promise((resolve,reject)=>{
          item.route.loadData(store).then(resolve).catch(resolve)
        })
        promises.push(promise)
}
这样做是比较好的容错机制
十七、服务端渲染对css样式的支持
    在使用style-loader、css-loader时，服务器端会报错，style-loader需要往页面挂载style,因为服务器端并没有window对象
    需要用到isomorphic-style-loader,但页面仍然有白屏抖动问题，并且浏览器禁用JavaScript时根本连样式都没有了。说明服务器端渲染时，样式并没有渲染出来。
    原因分析，isomorphic-style-loader和style-loader都会往标签上添加class类名，但是isomorphic-style-loader并没有往<header>中加入<style>,
    其次，服务器端和客户端import styles from './style.css'得到的styles是不一样的，服务器端产生的styles中有_getCss（）等方法可以调用，而客户端的却没有。
    我们可以利用this.props.staticContext判断是服务器端还是客户端渲染，如果staticContext为undefined，那就是客户端渲染。要注意的是staticContext不能
    跨组件获取，例如
    <Provider store={store}>
          <StaticRouter location={req.path} context={context}>
            <div>
              {renderRoutes(routes)}
            </div>
          </StaticRouter>
    </Provider>，假如现在渲染的routes中是<App>,那么<App>中的<Header>组件里是不能获取到this.props.staticContext的，但是在<App>中是可以的，所以不能跨组件。
    所以
    componentWillMount(){
        const {staticContext}=this.props
        staticContext&&(staticContext.css=styles._getCss())
    }
    那么context.css就可以获取到样式，
    const cssStr = context.css
      return `
        <html>
          <head>
            <title>ssr</title>
            <style>${cssStr}</style>
          </head>
          <body>
            <div id="root">${content}</div>
            <script>
            window.context={
              state: ${JSON.stringify(store.getState())}
            }
            </script>
            <script src="/index.js"></script>
          </body>
        </html>
        `
        这样就解决了以上问题，实现了css样式的服务器端渲染
十八、使用高阶组件
目的是具备一些公共的特性，例如这里统一整合css样式
export default (DecoratedComponent,styles) => {
  //返回的叫做高阶组件
  return class NewComponent extends Component{
    componentWillMount(){
      const {staticContext}=this.props
      staticContext&&(staticContext.css.push(styles._getCss()))
    }
    render(){
      return    <DecoratedComponent {...this.props}/>
    }
  }
}

